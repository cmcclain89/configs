{
	// Place your snippets for elixir here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"lv_module": {
		"prefix": "lv",
		"body": [
			"defmodule ${WORKSPACE_NAME/(.*)/${1:/pascalcase}/g}Web.${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} do",
			"  use ${WORKSPACE_NAME/(.*)/${1:/pascalcase}/g}Web, :live_view",
			"  $0",
			"end"
		],
		"description": "LiveView module"
	},
	"lc_module": {
		"prefix": "lc",
		"body": [
			"defmodule ${WORKSPACE_NAME/(.*)/${1:/pascalcase}/g}Web.${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} do",
			"  use ${WORKSPACE_NAME/(.*)/${1:/pascalcase}/g}Web, :live_component",
			"  $0",
			"end"
		],
		"description": "LiveComponent module"
	},
	"module": {
		"prefix": "defm",
		"body": [
			"defmodule ${WORKSPACE_NAME/(.*)/${1:/pascalcase}/g}Web.${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} do",
			"  $0",
			"end"
		],
		"description": "LiveComponent module"
	},
	"lv_mount": {
		"prefix": "mount",
		"body": [
			"def mount(_params, _session, socket) do",
			"  socket =",
			"    assign(socket,",
			"      ${1:key}: ${2:value}",
			"    )",
			"",
			"  {:ok, socket}",
			"end"
		],
		"description": "LiveView mount function"
	},
	"lv_render": {
		"prefix": "rend",
		"body": [
			"def render(assigns) do",
			"  ~H\"\"\"",
			"  ${0}",
			"  \"\"\"",
			"end"
		],
		"description": "LiveView render function"
	},
	"lv_function_component": {
		"prefix": "fc",
		"body": [
			"def ${1:name}(assigns) do",
			"  ~H\"\"\"",
			"  ${2}",
			"  \"\"\"",
			"end"
		],
		"description": "LiveView function component"
	},
	"lv_handle_event": {
		"prefix": "he",
		"body": [
			"def handle_event(${1:event}, _, socket) do",
			"  {:noreply, socket}",
			"end"
		],
		"description": "LiveView handle_event function"
	},
	"lv_handle_event1": {
		"prefix": "he1",
		"body": [
			"def handle_event(${1:event}, _, socket) do",
			"  socket = assign(socket, ${2:key}: ${3:value})",
			"  {:noreply, socket}",
			"end"
		],
		"description": "LiveView handle_event function"
	},
	"lv_handle_event2": {
		"prefix": "he2",
		"body": [
			"def handle_event(${1:event}, _, socket) do",
			"  socket =",
			"    assign(socket,",
			"      ${2:key}: ${3:value}",
			"    )",
			"",
			"  {:noreply, socket}",
			"end"
		],
		"description": "LiveView handle_event function"
	},
	"lv_handle_info": {
		"prefix": "hi",
		"body": [
			"def handle_info(${1:message}, socket) do",
			"  {:noreply, socket}",
			"end"
		],
		"description": "LiveView handle_info function"
	},
	"lv_handle_info1": {
		"prefix": "hi1",
		"body": [
			"def handle_info(${1:message}, socket) do",
			"  socket = assign(socket, ${2:key}: ${3:value})",
			"  {:noreply, socket}",
			"end"
		],
		"description": "LiveView handle_info function"
	},
	"lv_handle_info2": {
		"prefix": "hi2",
		"body": [
			"def handle_info(${1:message}, socket) do",
			"  socket =",
			"    assign(socket,",
			"      ${2:key}: ${3:value}",
			"    )",
			"",
			"  {:noreply, socket}",
			"end"
		],
		"description": "LiveView handle_info function"
	},
	"lv_handle_params": {
		"prefix": "hp",
		"body": [
			"def handle_params(${1:params}, _uri, socket) do",
			"  {:noreply, socket}",
			"end"
		],
		"description": "LiveView handle_params function"
	},
	"lv_heex": {
		"prefix": "h",
		"body": [
			"~H\"\"\"",
			"${0}",
			"\"\"\""
		],
		"description": "LiveView HEEx template"
	},
	"lv_assign": {
		"prefix": "assign",
		"body": [
			"socket =",
			"  assign(socket,",
			"    ${1:key}: ${2:value}",
			"  )"
		],
		"description": "LiveView assign"
	},
	"insp": {
		"prefix": "insp",
		"body": "IO.inspect(self(), label: \"${0:label}\")",
		"description": "Inspect process with a label"
	},
	"map": {
		"prefix": "m",
		"body": "%{\"${1}\" => ${2}}",
		"description": "Elixir map"
	},
	"Embedded Elixir Expression": {
		"prefix": "eee",
		"body": [
			"<% ${1:expression} do %>",
			"  ${2:content}",
			"<% end %>"
		],
		"description": "Quickly make an embedded Elixir expression"
	},
	"Embedded Elixir Var": {
		"prefix": "eev",
		"body": [
			"<%= ${1:assigns} %>"
		],
		"description": "It be like this fr fr"
	},
	"Create Table Ecto Migration": {
		"prefix": "emct",
		"body": [
			"create table(:${1:table}) do",
			"  add :${2:column}, :${3:type}, ${4:option}: ${5:value}",
			"  ",
			"  timestamps(type: :utc_datetime)",
			"end"
		]
	},
	"Create Index Ecto Migration": {
		"prefix": "emci",
		"body": [
			"create index(:${1:table}, [:${2:field_name}])",
		]
	},
	"Create Unique Index Ecto Migration": {
		"prefix": "emcu",
		"body": [
			"create unqiue index(:${1:table}, [:${2:field_name}])"
		]
	},
	"Create Constraint Ecto Migration": {
		"prefix": "emcn",
		"body": [
			"create constraint(:${1:table}, :${2:contsraint_name},",
			"         check: \"${3:cond}\",",
			"         comment: \"${4:comment}\"",
			"       )"
		]
	},
	"Add Foreign Key Ecto Migration": {
		"prefix": "emaf",
		"body": [
			"add :${1:column}, references(:${2:referenced_table}, on_delete: :${3:on_delete})"
		]
	}
}
